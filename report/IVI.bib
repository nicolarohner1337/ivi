
@online{plotly_webgl_nodate,
	title = {Webgl vs svg in Python},
	url = {https://plotly.com/python/webgl-vs-svg/},
	titleaddon = {{WebGL} vs {SVG} in Python},
	author = {{Plotly}},
	urldate = {2023-03-18},
	file = {Webgl vs svg in Python:/Users/nicolarohner/Zotero/storage/SVPKXGG3/webgl-vs-svg.html:text/html},
}

@online{kayce_basques_analyze_nodate,
	title = {Analyze runtime performance},
	url = {https://developer.chrome.com/docs/devtools/performance/},
	abstract = {Learn how to evaluate runtime performance in Chrome {DevTools}.},
	titleaddon = {Chrome Developers},
	author = {{Kayce Basques}},
	urldate = {2023-03-18},
	langid = {english},
	file = {Snapshot:/Users/nicolarohner/Zotero/storage/2VNNVTUP/performance.html:text/html},
}

@inproceedings{wong_abstract_2013,
	location = {San Francisco, California, {USA}},
	title = {Abstract rendering: out-of-core rendering for information visualization},
	url = {http://proceedings.spiedigitallibrary.org/proceeding.aspx?doi=10.1117/12.2041200},
	doi = {10.1117/12.2041200},
	shorttitle = {Abstract rendering},
	eventtitle = {{IS}\&T/{SPIE} Electronic Imaging},
	pages = {90170K},
	author = {Cottam, Joseph A. and Lumsdaine, Andrew and Wang, Peter},
	editor = {Wong, Pak Chung and Kao, David L. and Hao, Ming C. and Chen, Chaomei},
	urldate = {2023-03-18},
	date = {2013-12-23},
}

@online{noauthor_plotly_nodate,
	title = {Plotly},
	url = {https://plotly.com/python/datashader/},
	abstract = {Detailed examples of Plotly and Datashader including changing color, size, log axes, and more in Python.},
	urldate = {2023-03-18},
	file = {Snapshot:/Users/nicolarohner/Zotero/storage/2GGUL6PP/datashader.html:text/html},
}

@online{deckgl_home_nodate,
	title = {Home {\textbar} deck.gl},
	url = {https://deck.gl/},
	abstract = {deck.gl},
	author = {{deck.gl}},
	urldate = {2023-03-19},
	langid = {english},
	file = {Snapshot:/Users/nicolarohner/Zotero/storage/MPIAAAXW/deck.gl.html:text/html},
}

@online{noauthor_measure_nodate,
	title = {Measure performance with the {RAIL} model},
	url = {https://web.dev/rail/},
	abstract = {{RAIL} model enables designers and developers to reliably target the performance optimization work that has the highest impact on user experience. Learn what goals and guidelines the {RAIL} model sets out and which tools you can use to achieve them.},
	titleaddon = {web.dev},
	urldate = {2023-03-19},
	langid = {english},
	file = {Snapshot:/Users/nicolarohner/Zotero/storage/2XWXA44G/rail.html:text/html},
}

@online{noauthor_memory_2023,
	title = {Memory management - {JavaScript} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management},
	abstract = {Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, {JavaScript} automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.},
	urldate = {2023-03-19},
	date = {2023-02-23},
	langid = {american},
	file = {Snapshot:/Users/nicolarohner/Zotero/storage/7K5JX3DV/Memory_Management.html:text/html},
}
